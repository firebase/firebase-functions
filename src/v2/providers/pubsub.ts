import { CloudEvent, CloudFunction } from '../base';
import * as options from '../options';

/**
 * Interface representing a Google Cloud Pub/Sub message.
 *
 * @param data Payload of a Pub/Sub message.
 */
export class Message {
  /**
   * Autogenerated ID that uniquely identifies this message.
   */
  readonly messageId: string;

  /**
   * Time the message was published
   */
  readonly publishTime: string;

  /**
   * The data payload of this message object as a base64-encoded string.
   */
  readonly data: string;

  /**
   * User-defined attributes published with the message, if any.
   */
  readonly attributes: { [key: string]: string };

  /**
   * User-defined key used to ensure ordering amongst messages with the same key.
   */
  readonly orderingKey: string;

  /** @hidden */
  private _json: any;

  constructor(data: any) {
    this.messageId = data.messageId;
    this.data = data.data;
    (this.attributes = data.attributes || {}), (this._json = data.json);
    this.orderingKey = data.orderingKey;
    this.publishTime = data.publishTime || new Date().toISOString();
  }

  /**
   * The JSON data payload of this message object, if any.
   */
  get json(): any {
    if (typeof this._json === 'undefined') {
      this._json = JSON.parse(
        Buffer.from(this.data, 'base64').toString('utf8')
      );
    }

    return this._json;
  }

  /**
   * Returns a JSON-serializable representation of this object.
   *
   * @return A JSON-serializable representation of this object.
   */
  toJSON(): any {
    const json: Record<string, any> = {
      messageId: this.messageId,
      data: this.data,
      publishTime: this.publishTime,
    };
    if (Object.keys(this.attributes).length) {
      json.attributes = this.attributes;
    }
    if (this.orderingKey) {
      json.orderingKey = this.orderingKey;
    }
    return json;
  }
}

/** The interface published in a Pub/Sub publish subscription. */
export interface MessagePublishedData {
  readonly message: Message;
  readonly subscription: string;
}

/** PubSubOptions extend EventHandlerOptions but must include a topic. */
export interface PubSubOptions extends options.EventHandlerOptions {
  topic: string;
}

/** Handle a message being published to a Pub/Sub topic. */
export function onMessagePublished(
  topic: string,
  callback: (event: CloudEvent<MessagePublishedData>) => any | Promise<any>
): CloudFunction<MessagePublishedData>;

/** Handle a message being published to a Pub/Sub topic. */
export function onMessagePublished(
  options: PubSubOptions,
  callback: (event: CloudEvent<MessagePublishedData>) => any | Promise<any>
): CloudFunction<MessagePublishedData>;

export function onMessagePublished(
  topicOrOptions: string | PubSubOptions,
  callback: (event: CloudEvent<MessagePublishedData>) => any | Promise<any>
): CloudFunction<MessagePublishedData> {
  let topic: string;
  let opts: options.EventHandlerOptions;
  if (typeof topicOrOptions === 'string') {
    topic = topicOrOptions;
    opts = {};
  } else {
    topic = topicOrOptions.topic;
    opts = { ...topicOrOptions };
    delete (opts as any).topic;
  }

  const func = (raw: CloudEvent<unknown>) => {
    const messagePublisheData = raw.data as {
      message: unknown;
      subscription: string;
    };
    messagePublisheData.message = new Message(messagePublisheData.message);
    return callback(raw as CloudEvent<MessagePublishedData>);
  };

  func.run = callback;

  func.__trigger = 'silencing transpiler';

  Object.defineProperty(func, '__trigger', {
    get: () => {
      const baseOpts = options.optionsToTriggerAnnotations(
        options.getGlobalOptions()
      );
      const specificOpts = options.optionsToTriggerAnnotations(opts);

      return {
        // TODO(inlined): Remove "apiVersion" once the CLI has migrated to
        // "platform"
        apiVersion: 2,
        platform: 'gcfv2',
        ...baseOpts,
        ...specificOpts,
        labels: {
          ...baseOpts?.labels,
          ...specificOpts?.labels,
        },
        eventTrigger: {
          eventType: 'google.cloud.pubsub.topic.v1.messagePublished',
          resource: `projects/${process.env.GCLOUD_PROJECT}/topics/${topic}`,
        },
      };
    },
  });

  return func;
}
